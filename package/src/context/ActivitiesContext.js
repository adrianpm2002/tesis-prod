import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { activitiesService } from '../services/activitiesService'; // ‚úÖ Importaci√≥n correcta



const ActivitiesContext = createContext();

export const ActivitiesProvider = ({ children }) => {
  const [activities, setActivities] = useState([]);

  const fetchActivities = async (zonaId) => {
    if (!zonaId) {
      console.warn("‚ö† Intento de obtener actividades sin zonaId v√°lido.");
      return; // ‚úÖ Evita la solicitud si `zonaId` es `undefined`
    }
  
    try {
      
      const actividades = await activitiesService.getByZona(zonaId);
      setActivities(actividades);
    } catch (error) {
      console.error("üö® Error al obtener actividades:", error);
    }
  };

  

  const checkActivityExists = async (activityId) => {
    try {
      
      const response = await activitiesService.getById(activityId); // ‚úÖ Debe consultar por ID
  
      if (!response || response.length === 0) {
        console.warn(`‚ö† La actividad con ID ${activityId} no existe.`);
        return false;
      }
  
      return true;
    } catch (error) {
      console.error("üö® Error verificando actividad:", error);
      return false;
    }
  };
  
  
  
  
  const deleteActivity = async (activityId, zonaId) => { // ‚úÖ Agregar zonaId
    if (!activityId) {
      console.error("‚ùå Intento de eliminar actividad sin ID v√°lido.");
      return;
    }
  
    try {
      await activitiesService.delete(activityId);
      console.log("‚úÖ Actividad eliminada correctamente.");
  
      // üîÑ Refrescar actividades despu√©s de la eliminaci√≥n con el `zonaId` correcto
      await fetchActivities(zonaId); 
    } catch (error) {
      console.error("üö® Error al eliminar actividad:", error);
    }
  };

  
  
  
  

  useEffect(() => {
    // Se actualizar√°n las actividades cuando se seleccione una zona
  }, []);

  return (
    <ActivitiesContext.Provider value={{ activities, deleteActivity, fetchActivities }}>
      {children}
    </ActivitiesContext.Provider>
  );
};

export const useActivities = () => {
  return useContext(ActivitiesContext);
};

